--- origsrc/nickle-2.67/Makefile.am	2008-03-20 12:18:16.000000000 -0500
+++ src/nickle-2.67/Makefile.am	2008-05-13 23:35:27.843750000 -0500
@@ -18,9 +18,10 @@
 	 debian/control debian/copyright debian/rules debian/lintian.override
 	 
 EXTRA_DIST = README.name autogen.sh ChangeLog \
-	$(NICKLEFILES) $(DEBIAN) nickle.1.in nickle.spec.in
+	$(NICKLEFILES) $(DEBIAN) nickle.1.in nickle.pc.in nickle.spec.in
 
 MAINTAINERCLEANFILES=ChangeLog
+DISTCLEANFILES = nickle.pc
 
 .PHONY: ChangeLog
 
@@ -30,6 +31,9 @@
 
 dist-hook: ChangeLog
 
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = nickle.pc
+
 nickleincludedir=$(includedir)/nickle
 
 nickleinclude_HEADERS = \
@@ -37,15 +41,16 @@
 	builtin-namespaces.h gram.h memp.h opcode.h stack.h
 
 bin_PROGRAMS = nickle
+lib_LTLIBRARIES = libnickle.la
 
-nickle_SOURCES = \
+libnickle_la_SOURCES = \
 	alarm.c array.c atom.c box.c compile.c debug.c \
 	divide.c edit.c error.c execute.c expr.c file.c float.c \
 	foreign.c frame.c func.c gcd.c hash.c int.c integer.c io.c \
-	main.c mem.c natural.c pretty.c profile.c rational.c ref.c \
+	mem.c natural.c pretty.c profile.c rational.c ref.c \
 	refer.c sched.c scope.c stack.c string.c struct.c \
 	symbol.c sync.c type.c union.c util.c value.c \
-	mem.h memp.h nickle.h opcode.h ref.h stack.h value.h \
+	mem.h memp.h nickle.h opcode.h ref.h signal.c stack.h value.h \
 	builtin-command.c builtin-debug.c builtin-environ.c \
 	builtin-file.c builtin-math.c builtin-namespaces.h \
 	builtin-semaphore.c builtin-sockets.c builtin-string.c \
@@ -53,7 +58,12 @@
 	builtin.c builtin.h \
 	builtin-foreign.c gram.y lex.l
 
+libnickle_la_LDFLAGS = -no-undefined
+
+nickle_SOURCES = main.c
+
 nickle_LDFLAGS=$(NICKLE_LDFLAGS)
+nickle_LDADD = libnickle.la
 
 pkgdata_DATA = $(NICKLEFILES) COPYING
 
--- origsrc/nickle-2.67/configure.in	2008-03-19 19:21:54.000000000 -0500
+++ src/nickle-2.67/configure.in	2008-05-13 23:35:49.593750000 -0500
@@ -30,6 +30,7 @@
 *bison)	YACC="$YACC -y"	;;
 esac
 AC_PROG_AWK
+AC_PROG_LIBTOOL
 AC_CHECK_PROGS([DATE], date)
 
 dnl Checks for libraries.
@@ -131,6 +132,7 @@
  examples/Makefile
  examples/smlng/Makefile
  examples/turtle/Makefile
+ nickle.pc
  date-sh)
 
 AC_OUTPUT
--- origsrc/nickle-2.67/file.c	2008-03-19 18:01:49.000000000 -0500
+++ src/nickle-2.67/file.c	2008-05-13 21:44:57.109375000 -0500
@@ -26,6 +26,10 @@
 #define USE_STREAMS_ASYNC
 #define ASYNC 0
 #include <stropts.h>
+#else
+#ifdef O_NONBLOCK
+#define ASYNC O_NONBLOCK
+#endif
 #endif
 #endif
 
--- origsrc/nickle-2.67/io.c	2006-04-02 22:23:30.000000000 -0500
+++ src/nickle-2.67/io.c	2008-05-13 23:09:10.093750000 -0500
@@ -82,7 +82,7 @@
     }
     if (anyTtyUnowned)
 	IoNoticeTtyUnowned ();
-    else if (stdin_interactive)
+    else if (isatty(0))
 	for (fd = 0; fd < 3; fd++)
 	    FileSetFd (fd);
 }
--- origsrc/nickle-2.67/main.c	2008-02-03 08:21:23.000000000 -0600
+++ src/nickle-2.67/main.c	2008-05-13 23:01:31.453125000 -0500
@@ -60,16 +60,6 @@
 RETSIGTYPE	intr(int), ferr(int);
 RETSIGTYPE	stop (int), die (int), segv (int);
 
-static void
-ignoreSignal(int sig) {
-    catchSignal (sig, SIG_IGN);
-}
-
-static void
-releaseSignal(int sig) {
-    catchSignal (sig, SIG_DFL);
-}
-
 /*ARGSUSED*/
 int
 main (int argc, char **argv)
@@ -128,68 +118,3 @@
     ThreadInit ();
     TimerInit ();
 }
-
-void
-catchSignal (int sig, RETSIGTYPE (*func) (int sig))
-{
-#ifdef HAVE_SIGACTION
-    struct sigaction sa;
-
-    memset (&sa, '\0', sizeof (struct sigaction));
-    sa.sa_handler = func;
-    sa.sa_flags = SA_RESTART;
-    sigaction (sig, &sa, 0);
-#else
-    signal (sig, func);
-#endif
-}
-
-void
-resetSignal (int sig, RETSIGTYPE (*func) (int sig))
-{
-#ifndef HAVE_SIGACTION
-    signal (sig, func);
-#endif
-}
-
-volatile Bool	signalInterrupt;
-
-RETSIGTYPE
-intr (int sig)
-{
-    resetSignal (SIGINT, intr);
-    SetSignalInterrupt ();
-}
-
-RETSIGTYPE
-stop (int sig)
-{
-    sigset_t	set, oset;
-
-    sigfillset (&set);
-    sigprocmask (SIG_SETMASK, &set, &oset);
-    IoStop ();
-    releaseSignal (sig);
-    sigfillset (&set);
-    sigdelset (&set, sig);
-    sigprocmask (SIG_SETMASK, &set, &set);
-    kill (getpid(), sig);
-    sigprocmask (SIG_SETMASK, &oset, &set);
-    IoStart ();
-    catchSignal (sig, stop);
-}
-
-RETSIGTYPE
-die (int sig)
-{
-    IoStop ();
-    _exit (sig);
-}
-
-RETSIGTYPE
-segv (int sig)
-{
-    IoStop ();
-    releaseSignal (SIGSEGV);
-    /* return and reexecute the fatal instruction */
-}
--- origsrc/nickle-2.67/nickle.pc.in	1969-12-31 18:00:00.000000000 -0600
+++ src/nickle-2.67/nickle.pc.in	2008-05-13 23:40:13.531250000 -0500
@@ -0,0 +1,11 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+includedir=@includedir@
+libdir=@libdir@
+nicklelibdir=@nicklelibdir@
+
+Name: Nickle
+Description: Nickle programming language
+Version: @VERSION@
+Libs: -L${libdir} -lnickle
+Cflags: -I${includedir}
--- origsrc/nickle-2.67/signal.c	1969-12-31 18:00:00.000000000 -0600
+++ src/nickle-2.67/signal.c	2008-05-13 23:10:06.625000000 -0500
@@ -0,0 +1,105 @@
+/* $Header: /usr/src/cygport/tmp/ports/apps/nickle/nickle-2.67-1.src.patch,v 1.1 2008-05-14 11:58:18 yselkowitz Exp $ */
+
+/*
+ * Copyright Â© 1988-2004 Keith Packard and Bart Massey.
+ * All Rights Reserved.  See the file COPYING in this directory
+ * for licensing information.
+ */
+
+/*
+ *	signal.c
+ *
+ *	signal routines for nick
+ */
+
+#include	"nickle.h"
+#include	"gram.h"
+
+#include	<setjmp.h>
+#define __USE_UNIX98 /* Get sigignore() and sigrelse()
+			prototype for Linux */
+#include	<signal.h>
+#include	<stdio.h>
+
+#if HAVE_SYS_TIME_H
+#include	<sys/time.h>
+#endif
+
+#if HAVE_SYS_RESOURCE_H
+#include	<sys/resource.h>
+#endif
+
+void
+ignoreSignal(int sig) {
+    catchSignal (sig, SIG_IGN);
+}
+
+void
+releaseSignal(int sig) {
+    catchSignal (sig, SIG_DFL);
+}
+
+void
+catchSignal (int sig, RETSIGTYPE (*func) (int sig))
+{
+#ifdef HAVE_SIGACTION
+    struct sigaction sa;
+
+    memset (&sa, '\0', sizeof (struct sigaction));
+    sa.sa_handler = func;
+    sa.sa_flags = SA_RESTART;
+    sigaction (sig, &sa, 0);
+#else
+    signal (sig, func);
+#endif
+}
+
+void
+resetSignal (int sig, RETSIGTYPE (*func) (int sig))
+{
+#ifndef HAVE_SIGACTION
+    signal (sig, func);
+#endif
+}
+
+volatile Bool	signalInterrupt;
+
+RETSIGTYPE
+intr (int sig)
+{
+    resetSignal (SIGINT, intr);
+    SetSignalInterrupt ();
+}
+
+RETSIGTYPE
+stop (int sig)
+{
+    sigset_t	set, oset;
+
+    sigfillset (&set);
+    sigprocmask (SIG_SETMASK, &set, &oset);
+    IoStop ();
+    releaseSignal (sig);
+    sigfillset (&set);
+    sigdelset (&set, sig);
+    sigprocmask (SIG_SETMASK, &set, &set);
+    kill (getpid(), sig);
+    sigprocmask (SIG_SETMASK, &oset, &set);
+    IoStart ();
+    catchSignal (sig, stop);
+}
+
+RETSIGTYPE
+die (int sig)
+{
+    IoStop ();
+    _exit (sig);
+}
+
+RETSIGTYPE
+segv (int sig)
+{
+    IoStop ();
+    releaseSignal (SIGSEGV);
+    /* return and reexecute the fatal instruction */
+}
